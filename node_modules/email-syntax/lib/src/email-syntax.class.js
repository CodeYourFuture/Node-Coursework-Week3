"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EmailSyntax = (function () {
    function EmailSyntax() {
    }
    /**
     * Validates given email address
     * @param {string} address - Email address to validate
     * @return {boolean}
     */
    EmailSyntax.validate = function (address) {
        var splittedAddress = this.split(address);
        if (!splittedAddress)
            return false;
        /* Local Part Checks */
        splittedAddress['localPart'] = this.extractFromQuotes(splittedAddress['localPart']);
        if (splittedAddress['localPart'].length === 0)
            return false;
        if (!this.validateLocalPart(splittedAddress['localPart']))
            return false;
        /* Domain Name Checks */
        if (!this.isValidIpAddress(splittedAddress['domainName'])) {
            if (!this.validateDomainName(splittedAddress['domainName']))
                return false;
        }
        return true;
    };
    /**
     * Splits email address to local part and domain name
     * @param {string} address - email address
     * @return {Object | boolean}
     */
    EmailSyntax.split = function (address) {
        if (address && address.length > 0) {
            var splittedAddress = address.split('@');
            return (splittedAddress.length === 2) ?
                { localPart: splittedAddress[0].trim(), domainName: splittedAddress[1].trim() } : false;
        }
        return false;
    };
    /**
     * Checks if quoted and extracts local part
     * @param {string} localPart - local part of address
     * @return {string}
     */
    EmailSyntax.extractFromQuotes = function (localPart) {
        if (localPart.charAt(0) === '"') {
            if (localPart.charAt(localPart.length - 1) === '"') {
                localPart = localPart.slice(1, localPart.length - 1);
                if (localPart.indexOf('"') !== -1)
                    return '';
            }
            else {
                return '';
            }
        }
        return localPart;
    };
    /**
     * Validates domain name syntaxis
     * @param {string} domainName - domain name
     * @return {boolean}
     */
    EmailSyntax.validateDomainName = function (domainName) {
        var parts = domainName.split('.');
        if (parts.length === 0)
            return false;
        /* Check if last part of tld domain is number (can't be) */
        if (parts.length > 1 && !Number.isNaN(+parts[parts.length - 1]))
            return false;
        for (var i = 0; i < parts.length; i++) {
            if (parts[i].length === 0)
                return false;
            var p = parts[i].match(this.domainPartRegex);
            if (p === null || p[0] !== parts[i])
                return false;
        }
        if (parts[parts.length - 1].length < 2)
            return false;
        return true;
    };
    /**
     * Validates local-part of address
     * @param {string} localPart - local part of address
     * @return {boolean}
     */
    EmailSyntax.validateLocalPart = function (localPart) {
        var regexResult = localPart.match(this.localPartRegex);
        if (regexResult === null || localPart !== regexResult[0])
            return false;
        return true;
    };
    /**
     * Checks if domain name is a valid ip address like 1.2.3.4
     * @param {string} domainName - domain name
     * @return {boolean}
     */
    EmailSyntax.isValidIpAddress = function (domainName) {
        var ip = domainName.split('.').map(function (o) { return +o; });
        if (ip.length !== 4)
            return false;
        for (var i = 0; i < 4; i++) {
            if (isNaN(ip[i]) || ip[i] > 254 || ip[i] < 1)
                return false;
        }
        return true;
    };
    EmailSyntax.localPartRegex = /^[A-Za-z0-9=?\/^_`{}|~!#$%&'*+-](\.?[A-Za-z0-9=?\/^_`{}|~!#$%&'*+-])*/g;
    EmailSyntax.domainPartRegex = /^[A-Za-z0-9](\-?[A-Za-z0-9])*/i;
    return EmailSyntax;
}());
exports.EmailSyntax = EmailSyntax;
//# sourceMappingURL=email-syntax.class.js.map